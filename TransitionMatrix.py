#imports
import re
import os
import numpy as np
from collections import Counter

#disassembled files to parse
f1 = open('Malware_example.txt','r') #files should be pre parsed

#TODO: This section can be made into faster, more efficient code

#convert files of words into arrays
math = open('samples_folder/sample_math.txt','r')
matharray = list(math.read().split())
math.close()

logic = open('samples_folder/sample_logic.txt','r')
logicarray = list(logic.read().split())
logic.close()

priv = open ('samples_folder/sample_priv.txt','r')
privarray = list(priv.read().split())
priv.close()

stack = open('samples_folder/sample_stack.txt','r')
stackarray = list(stack.read().split())
stack.close()

nop = open('samples_folder/sample_nop.txt','r')
noparray = list(nop.read().split())
nop.close()

other = open('samples_folder/sample_other.txt','r')
otherarray = list(other.read().split())
other.close()

memory = open('samples_folder/sample_memory.txt','r')
memoryarray = list(memory.read().split())
memory.close()

branch = open('samples_folder/sample_branch.txt','r')
brancharray = list(branch.read().split())
branch.close()

#convert arrays into dictionaries
math_dict = dict()
math_dict.update(dict.fromkeys(matharray,0))

logic_dict = dict()
logic_dict.update(dict.fromkeys(logicarray,1))

priv_dict = dict()
priv_dict.update(dict.fromkeys(privarray, 2))

stack_dict = dict()
stack_dict.update(dict.fromkeys(stackarray, 3))

nop_dict = dict()
nop_dict.update(dict.fromkeys(noparray,4))

other_dict = dict()
other_dict.update(dict.fromkeys(otherarray,5))

memory_dict = dict()
memory_dict.update(dict.fromkeys(memoryarray,6))

branch_dict = dict()
branch_dict.update(dict.fromkeys(brancharray,7))

#create big dictionary of all keys for easy processing
word_set = dict(math_dict.items() + logic_dict.items() + priv_dict.items() + stack_dict.items() + nop_dict.items() + other_dict.items() + memory_dict.items() + branch_dict.items())

#empty transition matrix
p = np.zeros((8,8), dtype = np.int)

#In the first loop of the file, lists all the states of the file
wordfound = list()

for line in f1: #loop can be adjusted for more files
	for word in word_set:
		for m in re.finditer(word,line):
			wordfound.append(word)

#print all states
print ""
print "The Current States in the file are: "
print ""
print wordfound
print '-----------------------------------------------------------------'
print ""


statelist = map(lambda word: word_set[word], wordfound)
transition_counts = Counter(zip(statelist, statelist[1:]))

for (x,y), c in transition_counts.iteritems():
	print "(%s,%s) = %d" % (x,y,c)
	p[x,y] = c

print ""
print "THE FINAL TRANSITION MATRIX:"
print ""
print p
print ""
